package com.deliveryclub.helpbot.service;

import com.deliveryclub.helpbot.models.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class SearchService {

    @Autowired
    private DictionaryService dictionaryService;

    @Autowired
    private QuestionService questionService;

    @Autowired
    private LinkService linkService;

    @Autowired
    private CallRuleService callRuleService;

    // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    public List<SearchResult> search(String query) {
        List<SearchResult> results = new ArrayList<>();
        String lowerQuery = query.toLowerCase();

        // –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–∏–∫–µ
        List<DictionaryCategory> dictionaryCategories = dictionaryService.getAllCategories();
        for (DictionaryCategory category : dictionaryCategories) {
            for (DictionaryTerm term : category.getTerms()) {
                if (term.getTerm().toLowerCase().contains(lowerQuery) ||
                        term.getDescription().toLowerCase().contains(lowerQuery)) {
                    results.add(new SearchResult(
                            "–°–ª–æ–≤–∞—Ä–∏–∫",
                            category.getName(),
                            term.getTerm(),
                            term.getDescription()
                    ));
                }
            }
        }

        // –ü–æ–∏—Å–∫ –≤ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–∫–∞—Ö
        List<LinkCategory> linkCategories = linkService.getAllCategories();
        for (LinkCategory category : linkCategories) {
            for (Link link : category.getLinks()) {
                if (link.getName().toLowerCase().contains(lowerQuery) ||
                        link.getDescription().toLowerCase().contains(lowerQuery) ||
                        link.getUrl().toLowerCase().contains(lowerQuery)) {
                    results.add(new SearchResult(
                            "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏",
                            category.getName(),
                            link.getName(),
                            link.getDescription() + "\nüîó " + link.getUrl()
                    ));
                }
            }
        }

        // –ü–æ–∏—Å–∫ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö


        // –ü–æ–∏—Å–∫ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö –¥–æ–∑–≤–æ–Ω–∞
        List<CallRuleCategory> callRuleCategories = callRuleService.getAllCategories();
        for (CallRuleCategory category : callRuleCategories) {
            for (CallRule rule : category.getRules()) {
                if (rule.getDescription().toLowerCase().contains(lowerQuery) ||
                        (rule.getLink() != null && rule.getLink().toLowerCase().contains(lowerQuery))) {
                    String description = rule.getDescription();
                    if (rule.getLink() != null && !rule.getLink().isEmpty()) {
                        description += "\nüîó " + rule.getLink();
                    }
                    results.add(new SearchResult(
                            "–ü—Ä–∞–≤–∏–ª–∞ –¥–æ–∑–≤–æ–Ω–∞",
                            category.getName(),
                            null, // –£ –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ "–Ω–∞–∑–≤–∞–Ω–∏—è", —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
                            description
                    ));
                }
            }
        }

        List<Question> questions = questionService.getAllQuestions();
        for (Question question : questions) {
            if (question.getQuestion().toLowerCase().contains(lowerQuery) ||
                    question.getCategory().toLowerCase().contains(lowerQuery) ||
                    (question.getAnswer() != null && question.getAnswer().toLowerCase().contains(lowerQuery))) {
                results.add(new SearchResult(
                        "–í–æ–ø—Ä–æ—Å—ã",
                        question.getCategory(),
                        question.getQuestion(),
                        question.getAnswer() != null ? question.getAnswer() : "–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                ));
            }
        }

        return results;

    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
