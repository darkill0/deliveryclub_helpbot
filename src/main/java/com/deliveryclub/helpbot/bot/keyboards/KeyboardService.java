package com.deliveryclub.helpbot.bot.keyboards;

import com.deliveryclub.helpbot.models.Question;
import com.deliveryclub.helpbot.models.User;
import com.deliveryclub.helpbot.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.ArrayList;
import java.util.List;

@Component
public class KeyboardService {

    private static final int QUESTIONS_PER_PAGE = 5;

    @Autowired
    private UserService userService;
    public ReplyKeyboardMarkup getUserKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üíº –ü—Ä–∞–∫—Ç–∏–∫–∏"));
        row1.add(new KeyboardButton("üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–µ"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üìÑ –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"));
        row2.add(new KeyboardButton("üì© –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"));
        row3.add(new KeyboardButton("‚è≥ –í–∑—è—Ç—å –æ—Ç–≥—É–ª / –§–æ—Ä—Å-–º–∞–∂–æ—Ä"));

        KeyboardRow row4 = new KeyboardRow();
        row4.add(new KeyboardButton("üí∏ –ó–∞–ø—Ä–æ—Å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"));
        row4.add(new KeyboardButton("üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã"));

        // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row5 = new KeyboardRow();
        row5.add(new KeyboardButton("üìú –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞"));
        row5.add(new KeyboardButton("‚ùì –ö–æ–º–∞–Ω–¥—ã"));

        keyboardMarkup.setKeyboard(List.of(row1, row2, row3, row4, row5));
        return keyboardMarkup;
    }

    // –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
    public InlineKeyboardMarkup getCompensationTypeKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞"
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton overtimeButton = new InlineKeyboardButton();
        overtimeButton.setText("‚è∞ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞");
        overtimeButton.setCallbackData("compensation_overtime");
        row1.add(overtimeButton);
        rows.add(row1);

        // –ö–Ω–æ–ø–∫–∞ "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton transportButton = new InlineKeyboardButton();
        transportButton.setText("üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç");
        transportButton.setCallbackData("compensation_transport");
        row2.add(transportButton);
        rows.add(row2);

        // –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–æ–µ"
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        InlineKeyboardButton otherButton = new InlineKeyboardButton();
        otherButton.setText("‚ùì –î—Ä—É–≥–æ–µ");
        otherButton.setCallbackData("compensation_other");
        row3.add(otherButton);
        rows.add(row3);

        markup.setKeyboard(rows);
        return markup;
    }

    // –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    public InlineKeyboardMarkup getShiftPeriodKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton todayButton = new InlineKeyboardButton();
        todayButton.setText("üìÖ –°–µ–≥–æ–¥–Ω—è");
        todayButton.setCallbackData("shift_today");
        row1.add(todayButton);
        rows.add(row1);

        // –ö–Ω–æ–ø–∫–∞ "–≠—Ç–∞ –Ω–µ–¥–µ–ª—è"
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton weekButton = new InlineKeyboardButton();
        weekButton.setText("üìÜ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è");
        weekButton.setCallbackData("shift_week");
        row2.add(weekButton);
        rows.add(row2);

        markup.setKeyboard(rows);
        return markup;
    }

    public InlineKeyboardMarkup getRequestTypeKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –æ—Ç–≥—É–ª"
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton dayOffButton = new InlineKeyboardButton();
        dayOffButton.setText("‚è≥ –í–∑—è—Ç—å –æ—Ç–≥—É–ª");
        dayOffButton.setCallbackData("request_day_off");
        row1.add(dayOffButton);
        rows.add(row1);

        // –ö–Ω–æ–ø–∫–∞ "–§–æ—Ä—Å-–º–∞–∂–æ—Ä"
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton forceMajeureButton = new InlineKeyboardButton();
        forceMajeureButton.setText("üö® –§–æ—Ä—Å-–º–∞–∂–æ—Ä");
        forceMajeureButton.setCallbackData("request_force_majeure");
        row2.add(forceMajeureButton);
        rows.add(row2);

        markup.setKeyboard(rows);
        return markup;
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (admin)
    public ReplyKeyboardMarkup getAdminKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏"));
        row1.add(new KeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"));
        row2.add(new KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üìä –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"));

        keyboardMarkup.setKeyboard(List.of(row1, row2, row3));
        return keyboardMarkup;
    }

/*    public InlineKeyboardMarkup getRequestModerationKeyboard(String requestId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(new InlineKeyboardButton().setText("‚úîÔ∏è –£—Ç–≤–µ—Ä–¥–∏—Ç—å").setCallbackData("approve_request_" + requestId)));
        rows.add(List.of(new InlineKeyboardButton().setText("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å").setCallbackData("reject_request_" + requestId)));
        markup.setKeyboard(rows);
        return markup;
    }*/

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (moderator)
    public ReplyKeyboardMarkup getModeratorKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"));
        row1.add(new KeyboardButton("üè• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–µ"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("‚è≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≥—É–ª—ã/—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä—ã"));
        row2.add(new KeyboardButton("üí∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("‚úîÔ∏è –£—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–∞–π–ª"));
        row3.add(new KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ñ–∞–π–ª"));

        KeyboardRow row4 = new KeyboardRow();
        row4.add(new KeyboardButton("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"));
        row4.add(new KeyboardButton("üìÖ –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É")); // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        KeyboardRow row5 = new KeyboardRow();
        row5.add(new KeyboardButton("üìã –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É")); // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞

        keyboardMarkup.setKeyboard(List.of(row1, row2, row3, row4, row5));
        return keyboardMarkup;
    }

    // –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public InlineKeyboardMarkup getUserSelectionKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<User> users = userService.getAllUsers(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (User user : users) {
            InlineKeyboardButton userButton = InlineKeyboardButton.builder()
                    .text(user.getUsername() + " (" + user.getTelegramId() + ")")
                    .callbackData("select_user_" + user.getTelegramId())
                    .build();
            rows.add(List.of(userButton));
        }

        markup.setKeyboard(rows);
        return markup;
    }

    public InlineKeyboardMarkup getFileModerationKeyboard(String fileId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton approveButton = InlineKeyboardButton.builder()
                .text("‚úîÔ∏è –£—Ç–≤–µ—Ä–¥–∏—Ç—å")
                .callbackData("approve_file_" + fileId)
                .build();
        rows.add(List.of(approveButton));

        InlineKeyboardButton rejectButton = InlineKeyboardButton.builder()
                .text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                .callbackData("reject_file_" + fileId)
                .build();
        rows.add(List.of(rejectButton));

        markup.setKeyboard(rows);
        return markup;
    }



    public InlineKeyboardMarkup getSubmissionModerationKeyboard(String submissionId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton approveButton = InlineKeyboardButton.builder()
                .text("‚úîÔ∏è –£—Ç–≤–µ—Ä–¥–∏—Ç—å")
                .callbackData("approve_submission_" + submissionId)
                .build();
        rows.add(List.of(approveButton));

        InlineKeyboardButton rejectButton = InlineKeyboardButton.builder()
                .text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                .callbackData("reject_submission_" + submissionId)
                .build();
        rows.add(List.of(rejectButton));

        markup.setKeyboard(rows);
        return markup;
    }

    public InlineKeyboardMarkup getCompensationModerationKeyboard(String requestId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton approveButton = InlineKeyboardButton.builder()
                .text("‚úîÔ∏è –£—Ç–≤–µ—Ä–¥–∏—Ç—å")
                .callbackData("approve_compensation_" + requestId)
                .build();
        rows.add(List.of(approveButton));

        InlineKeyboardButton rejectButton = InlineKeyboardButton.builder()
                .text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                .callbackData("reject_compensation_" + requestId)
                .build();
        rows.add(List.of(rejectButton));

        markup.setKeyboard(rows);
        return markup;
    }

    public InlineKeyboardMarkup getUserRequestModerationKeyboard(String requestId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton approveButton = InlineKeyboardButton.builder()
                .text("‚úîÔ∏è –£—Ç–≤–µ—Ä–¥–∏—Ç—å")
                .callbackData("approve_request_" + requestId)
                .build();
        rows.add(List.of(approveButton));

        InlineKeyboardButton rejectButton = InlineKeyboardButton.builder()
                .text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                .callbackData("reject_request_" + requestId)
                .build();
        rows.add(List.of(rejectButton));

        markup.setKeyboard(rows);
        return markup;
    }

    public ReplyKeyboardMarkup getSickLeaveKeyboard() {
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö"));
        row1.add(new KeyboardButton("üìù –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π –±–æ–ª—å–Ω–∏—á–Ω—ã–π"));

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row1);

        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setKeyboard(keyboard);
        markup.setResizeKeyboard(true);

        return markup;
    }

    public InlineKeyboardMarkup getSickLeaveModerationKeyboard(String sickLeaveId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–£—Ç–≤–µ—Ä–¥–∏—Ç—å"
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton approveButton = new InlineKeyboardButton();
        approveButton.setText("‚úîÔ∏è –£—Ç–≤–µ—Ä–¥–∏—Ç—å");
        approveButton.setCallbackData("approve_sickleave_" + sickLeaveId);
        row1.add(approveButton);
        rows.add(row1);

        // –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton rejectButton = new InlineKeyboardButton();
        rejectButton.setText("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å");
        rejectButton.setCallbackData("reject_sickleave_" + sickLeaveId);
        row2.add(rejectButton);
        rows.add(row2);

        markup.setKeyboard(rows);
        return markup;
    }

    public ReplyKeyboardMarkup getQuestionManagementKeyboard() {
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"));
        row1.add(new KeyboardButton("üîç –ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–∞"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"));
        row2.add(new KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"));

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row1);
        keyboard.add(row2);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);

        return keyboardMarkup;
    }

    public InlineKeyboardMarkup getQuestionsListKeyboard(List<Question> questions, int page) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        int totalPages = (int) Math.ceil((double) questions.size() / QUESTIONS_PER_PAGE);
        int start = page * QUESTIONS_PER_PAGE;
        int end = Math.min(start + QUESTIONS_PER_PAGE, questions.size());

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        for (int i = start; i < end; i++) {
            Question question = questions.get(i);
            InlineKeyboardButton questionButton = InlineKeyboardButton.builder()
                    .text(question.getQuestion() + " (ID: " + question.getId() + ")")
                    .callbackData("select_question_" + question.getId())
                    .build();
            rows.add(List.of(questionButton));
        }

        // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        List<InlineKeyboardButton> navigationRow = new ArrayList<>();
        if (page > 0) {
            navigationRow.add(InlineKeyboardButton.builder()
                    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                    .callbackData("questions_page_" + (page - 1))
                    .build());
        }
        if (page < totalPages - 1) {
            navigationRow.add(InlineKeyboardButton.builder()
                    .text("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è")
                    .callbackData("questions_page_" + (page + 1))
                    .build());
        }
        if (!navigationRow.isEmpty()) {
            rows.add(navigationRow);
        }

        markup.setKeyboard(rows);
        return markup;
    }




}