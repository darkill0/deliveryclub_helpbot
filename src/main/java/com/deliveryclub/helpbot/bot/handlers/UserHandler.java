package com.deliveryclub.helpbot.bot.handlers;

import com.deliveryclub.helpbot.models.SickLeave;
import com.deliveryclub.helpbot.models.Submission;
import com.deliveryclub.helpbot.service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Document;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
public class UserHandler {

    @Autowired
    UserStateService userStateService;

    @Autowired
    TelegramService telegramService;

    @Autowired
    SubmissionService submissionService;

    @Autowired
    SickLeaveService sickLeaveService;

    public void handlerUserMessage(Update update, String userMessage, long chatId) {
        String state = userStateService.getUserState(chatId);
        System.out.println("2user");
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long callbackChatId = update.getCallbackQuery().getMessage().getChatId();
            System.out.println(callbackData);
            handleCallbackQuery(callbackData, callbackChatId);
            return; // –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–∞
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (!update.hasMessage()) {
            return; // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (update.getMessage().hasDocument()) {
            Document document = update.getMessage().getDocument();
            userStateService.saveTemporaryData(chatId, "lastDocument", document);
            // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ waiting_for_file_upload, —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            if ("waiting_for_file_upload".equals(state)) {
                handleFileUploadProcessing(chatId, update);
            }
            return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.getMessage().hasText()) {
            switch (state) {
                case "NEW_SICK_LEAVE_START_DATE":
                    handleStartDateInput(chatId, userMessage);
                    break;
                case "NEW_SICK_LEAVE_END_DATE":
                    handleEndDateInput(chatId, userMessage);
                    break;
                case "NEW_SICK_LEAVE_CONFIRMATION":
                    handleSickLeaveConfirmation(chatId, userMessage);
                    break;
                case "waiting_for_submission_title":
                    handleSubmissionTitle(chatId, userMessage);
                    break;
                case "waiting_for_submission_description":
                    handleSubmissionDescription(chatId, userMessage);
                    break;
                case "waiting_for_submission_confirmation":
                    handleSubmissionConfirmation(chatId, userMessage);
                    break;
                case "waiting_for_file_upload":
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç "–î–∞" –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
                    if (userMessage.equalsIgnoreCase("–î–∞")) {
                        handleFileUploadProcessing(chatId, update);
                    } else {
                        telegramService.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–î–∞'.");
                    }
                    break;
                case "waiting_for_submission_choice":
                    telegramService.sendMessage(chatId, "sds");
                    break;
                default:
                    if (userMessage.equalsIgnoreCase("üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–µ")) {
                        telegramService.sendSilcKeyboard(chatId);
                    } else if (userMessage.equalsIgnoreCase("üìÑ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")) {
                        sendCreateSubmission(chatId);
                    } else if (userMessage.equalsIgnoreCase("üì© –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")) {
                        userStateService.setUserState(chatId, "waiting_for_submission_choice");
                        //telegramService.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.");
                        sendSubmissionListWithPagination(chatId, 1);
                    } else if (userMessage.equalsIgnoreCase("üìÑ –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")) {
                        sendUserSubmissions(chatId);
                    } else {
                        handleSickLeaveMessage(userMessage, chatId);
                    }
                    break;
            }
        }
    }

    private void handleStartDateInput(long chatId, String userMessage) {
        try {
            Date startDate = parseDate(userMessage);
            userStateService.saveTemporaryData(chatId, "startDate", startDate);
            userStateService.setUserState(chatId, "NEW_SICK_LEAVE_END_DATE");
            telegramService.sendMessage(chatId, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD).");
        } catch (Exception e) {
            telegramService.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –§–æ—Ä–º–∞—Ç: YYYY-MM-DD.");
        }
    }



    private void handleEndDateInput(long chatId, String userMessage) {
        try {
            Date endDate = parseDate(userMessage);
            Date startDate = (Date) userStateService.getTemporaryData(chatId, "startDate");

            if (endDate.before(startDate)) {
                telegramService.sendMessage(chatId, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                return;
            }

            userStateService.saveTemporaryData(chatId, "endDate", endDate);
            userStateService.setUserState(chatId, "NEW_SICK_LEAVE_CONFIRMATION");
            telegramService.sendMessage(chatId, "–í–∞—à –±–æ–ª—å–Ω–∏—á–Ω—ã–π —Å " + startDate + " –ø–æ " + endDate + " –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π '–î–∞' –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–ù–µ—Ç'.");
        } catch (Exception e) {
            telegramService.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –§–æ—Ä–º–∞—Ç: YYYY-MM-DD.");
        }
    }

    private void handleSickLeaveConfirmation(long chatId, String userMessage) {
        if (userMessage.equalsIgnoreCase("–î–∞")) {
            Date startDate = (Date) userStateService.getTemporaryData(chatId, "startDate");
            Date endDate = (Date) userStateService.getTemporaryData(chatId, "endDate");

            SickLeave sickLeave = new SickLeave();
            sickLeave.setUserId(getUserIdByChatId(chatId));
            sickLeave.setStartDate(String.valueOf(startDate));
            sickLeave.setEndDate(String.valueOf(endDate));
            sickLeave.setStatus("pending");

            sickLeaveService.saveSickLeave(sickLeave);

            userStateService.clearUserState(chatId);
            telegramService.sendMessage(chatId, "–í–∞—à –±–æ–ª—å–Ω–∏—á–Ω—ã–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
        } else if (userMessage.equalsIgnoreCase("–ù–µ—Ç")) {
            userStateService.clearUserState(chatId);
            telegramService.sendMessage(chatId, "–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        } else {
            telegramService.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–î–∞', –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–ù–µ—Ç'.");
        }
    }

    private void handleCallbackQuery(String callbackData, long chatId) {
        if (callbackData.startsWith("submission_")) {
            handleSubmissionChoice(chatId, callbackData);
        } else if (callbackData.startsWith("page_")) {
            int page = Integer.parseInt(callbackData.split("_")[1]);
            sendSubmissionListWithPagination(chatId, page);
        } else {
        }
    }

    private void sendUserSubmissions(long chatId) {
        List<Submission> userSubmissions = submissionService.getSubmissionsByUser(chatId);

        if (userSubmissions.isEmpty()) {
            telegramService.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìÑ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'.");
            return;
        }

        StringBuilder responseText = new StringBuilder("üìã *–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:*\n\n");
        for (Submission submission : userSubmissions) {
            responseText.append("üìå *–ù–∞–∑–≤–∞–Ω–∏–µ*: ").append(submission.getTitle()).append("\n")
                    .append("üìù *–û–ø–∏—Å–∞–Ω–∏–µ*: ").append(submission.getDescription()).append("\n")
                    .append("üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è*: ").append(new SimpleDateFormat("yyyy-MM-dd").format(submission.getSubmittedAt())).append("\n")
                    .append("üìÇ *–°—Ç–∞—Ç—É—Å*: ").append(getSubmissionStatusEmoji(submission.getStatus())).append(" ").append(submission.getStatus()).append("\n")
                    .append("üîó *ID*: ").append(submission.getId()).append("\n\n");
        }

        telegramService.sendMessage(chatId, responseText.toString());
    }

    private String getSubmissionStatusEmoji(String status) {
        switch (status.toLowerCase()) {
            case "pending":
                return "‚è≥";
            case "approved":
                return "‚úÖ";
            case "rejected":
                return "‚ùå";
            default:
                return "üîç";
        }
    }

    private Date parseDate(String dateStr) throws Exception {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.parse(dateStr);
    }

    private void sendCreateSubmission(long chatId) {
        telegramService.sendMessage(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è");
        userStateService.setUserState(chatId, "waiting_for_submission_title");
    }

    private void handleSubmissionTitle(long chatId, String userMessage) {
        String title = userMessage.trim();

        if (title.isEmpty()) {
            telegramService.sendMessage(chatId, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.");
            return;
        }

        userStateService.saveTemporaryData(chatId, "submissionTitle", title);
        telegramService.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.");
        userStateService.setUserState(chatId, "waiting_for_submission_description");
    }

    private void handleSubmissionDescription(long chatId, String userMessage) {
        String description = userMessage.trim();

        if (description.isEmpty()) {
            telegramService.sendMessage(chatId, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.");
            return;
        }

        userStateService.saveTemporaryData(chatId, "submissionDescription", description);
        telegramService.sendMessage(chatId, "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–î–∞', –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–ù–µ—Ç'.");
        userStateService.setUserState(chatId, "waiting_for_submission_confirmation");
    }

    private void handleSubmissionConfirmation(long chatId, String userMessage) {
        if (userMessage.equalsIgnoreCase("–î–∞")) {
            String title = (String) userStateService.getTemporaryData(chatId, "submissionTitle");
            String description = (String) userStateService.getTemporaryData(chatId, "submissionDescription");

            Submission newSubmission = new Submission();
            newSubmission.setTitle(title);
            newSubmission.setDescription(description);
            newSubmission.setSubmittedBy(getUserIdByChatId(chatId));
            newSubmission.setSubmittedAt(new Date());
            newSubmission.setStatus("pending");

            submissionService.saveSubmission(newSubmission);

            userStateService.clearUserState(chatId);
            telegramService.sendMessage(chatId, "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.");
        } else if (userMessage.equalsIgnoreCase("–ù–µ—Ç")) {
            telegramService.sendMessage(chatId, "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            userStateService.clearUserState(chatId);
        } else {
            telegramService.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–î–∞', –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–ù–µ—Ç'.");
        }
    }

    private void handleSubmissionChoice(long chatId, String callbackData) {
        String submissionId = callbackData.replace("submission_", "");
        Submission submission = submissionService.findById(submissionId);

        if (submission == null) {
            telegramService.sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        userStateService.saveTemporaryData(chatId, "selectedSubmission", submission);
        userStateService.setUserState(chatId, "waiting_for_file_upload");

        Document lastDocument = (Document) userStateService.getTemporaryData(chatId, "lastDocument");
        if (lastDocument != null) {
            telegramService.sendMessage(chatId, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: " + submission.getTitle() + ". –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª '" + lastDocument.getFileName() + "'? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–∞' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª.");
        } else {
            telegramService.sendMessage(chatId, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: " + submission.getTitle() + ". –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.");
        }
    }
    private void sendSubmissionListWithPagination(long chatId, int page) {
        List<Submission> submissions = submissionService.getSubmissionsByUser(chatId);
        int pageSize = 5;
        int totalPages = (int) Math.ceil((double) submissions.size() / pageSize);

        if (submissions.isEmpty()) {
            telegramService.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.");
            userStateService.clearUserState(chatId);
            return;
        }

        List<Submission> paginatedSubmissions = submissions.stream()
                .skip((long) (page - 1) * pageSize)
                .limit(pageSize)
                .toList();

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Submission submission : paginatedSubmissions) {
            InlineKeyboardButton button = InlineKeyboardButton.builder()
                    .text(submission.getTitle())
                    .callbackData("submission_" + submission.getId())
                    .build();
            keyboard.add(List.of(button));
        }

        if (totalPages > 1) {
            List<InlineKeyboardButton> navigationButtons = new ArrayList<>();
            if (page > 1) {
                navigationButtons.add(InlineKeyboardButton.builder()
                        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                        .callbackData("page_" + (page - 1))
                        .build());
            }
            if (page < totalPages) {
                navigationButtons.add(InlineKeyboardButton.builder()
                        .text("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è")
                        .callbackData("page_" + (page + 1))
                        .build());
            }
            keyboard.add(navigationButtons);
        }

        inlineKeyboardMarkup.setKeyboard(keyboard);
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª:");
        message.setReplyMarkup(inlineKeyboardMarkup);

        telegramService.sendInlineKeyboard(chatId, message);
    }

    public void handleFileUploadProcessing(long chatId, Update update) {
        Document userDocument = null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (update.hasMessage() && update.getMessage().hasDocument()) {
            userDocument = update.getMessage().getDocument();
        } else if (update.hasMessage() && update.getMessage().hasText() && update.getMessage().getText().equalsIgnoreCase("–î–∞")) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª "–î–∞", –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            userDocument = (Document) userStateService.getTemporaryData(chatId, "lastDocument");
        }

        if (userDocument == null) {
            telegramService.sendMessage(chatId, "–û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–î–∞'.");
            return;
        }

        String fileId = userDocument.getFileId();

        try {
            org.telegram.telegrambots.meta.api.objects.File telegramFile = telegramService.getFile(fileId);

            String originalFileName = userDocument.getFileName();
            String localFileName = "uploads/" + chatId + "_" + System.currentTimeMillis() + "_" + originalFileName;

            File uploadDir = new File("uploads");
            if (!uploadDir.exists()) {
                uploadDir.mkdirs(); // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            }

            telegramService.downloadFile(telegramFile.getFilePath(), new File(localFileName));

            Submission selectedSubmission = (Submission) userStateService.getTemporaryData(chatId, "selectedSubmission");

            if (selectedSubmission == null) {
                telegramService.sendMessage(chatId, "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.");
                return;
            }

            selectedSubmission.setFileUrl(localFileName);
            submissionService.saveSubmission(selectedSubmission);

            telegramService.sendMessage(chatId, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é: " + selectedSubmission.getTitle());
        } catch (Exception e) {
            telegramService.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: " + e.getMessage());
        } finally {
            userStateService.clearUserState(chatId);
        }
    }
    private String getUserIdByChatId(long chatId) {
        return String.valueOf(chatId); // –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    }

    private void handleSickLeaveMessage(String userMessage, long chatId) {
        if (userMessage.equals("üìÖ –ò—Å—Ç–æ—Ä–∏—è –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö")) {
            sendSickLeaveHistory(chatId);
        } else if (userMessage.equals("üìù –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π –±–æ–ª—å–Ω–∏—á–Ω—ã–π")) {
            sendNewSickLeaveForm(chatId);
        }
    }

    private void sendSickLeaveHistory(long chatId) {
        List<SickLeave> sickLeaves = sickLeaveService.getSickLeavesByUserId(chatId);

        if (sickLeaves.isEmpty()) {
            telegramService.sendMessage(chatId, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö.");
            return;
        }

        StringBuilder responseText = new StringBuilder("üìú *–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö:*\n\n");
        for (SickLeave sickLeave : sickLeaves) {
            responseText.append("üìÖ *–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞*: ").append(sickLeave.getStartDate()).append("\n")
                    .append("üè• *–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è*: ").append(sickLeave.getEndDate()).append("\n")
                    .append("üîñ *–°—Ç–∞—Ç—É—Å*: ").append(sickLeave.getStatus()).append("\n\n");
        }

        telegramService.sendMessage(chatId, responseText.toString());
    }

    private void sendNewSickLeaveForm(long chatId) {
        telegramService.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-25).");
        userStateService.setUserState(chatId, "NEW_SICK_LEAVE_START_DATE");
    }
}