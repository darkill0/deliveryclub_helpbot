package com.deliveryclub.helpbot.bot.handlers;

import com.deliveryclub.helpbot.bot.keyboards.KeyboardService;
import com.deliveryclub.helpbot.models.Question;
import com.deliveryclub.helpbot.models.Submission;
import com.deliveryclub.helpbot.service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Component
public class AdminHandler {

    @Autowired
    UserStateService userStateService;
    @Autowired
    TelegramService telegramService;
    @Autowired
    QuestionService questionService;
    @Autowired
    SubmissionService submissionService;
    @Autowired
    UserService userService;
    @Autowired
    KeyboardService keyboardService;

    public void handlerAdminMessage(Update update, String userMessage, long chatId) {
        String state = userStateService.getUserState(chatId);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        switch (state) {
            case "waiting_for_question_category":
                handleCreateQuestionCategory(chatId, userMessage);
                break;
            case "waiting_for_question_text":
                handleCreateQuestionText(chatId, userMessage);
                break;
            case "waiting_for_answer_text":
                handleCreateAnswerText(chatId, userMessage);
                break;
            case "waiting_for_search_keyword":
                handleSearchQuestionByKeyword(chatId, userMessage);
                break;
            case "waiting_for_question_id_for_update":
                handleUpdateAnswerForQuestion(chatId, userMessage);
                break;
            case "waiting_for_question_id_for_deletion":
                handleDeleteQuestionById(chatId, userMessage);
                break;
            case "waiting_for_new_answer":
                handleUpdateAnswerText(chatId, userMessage);
                break;
            case "waiting_for_submission_approval":
                handleSubmissionApproval(chatId, userMessage);
                break;
            case "waiting_for_submission_rejection":
                handleSubmissionRejection(chatId, userMessage);
                break;
            case "waiting_for_username":
                handleUserMessage(update, userMessage, chatId);
                break;
            case "waiting_for_telegram_id":
                handleUserMessage(update, userMessage, chatId);
                break;
            case "waiting_for_role":
                handleUserMessage(update, userMessage, chatId);
                break;
            case "waiting_for_department":
                handleUserMessage(update, userMessage, chatId);
                break;
            case "waiting_for_password":
                handleUserMessage(update, userMessage, chatId);
                break;
            default:
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if (userMessage.equals("üìä –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")) {
                    telegramService.sendMessage(chatId, "‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ú®");
                    userStateService.setUserState(chatId, "waiting_for_username");
                } else if (userMessage.equals("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏")) {
                    telegramService.sendQuestionKeyboard(chatId);
                } else if (userMessage.equals("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")) {
                    telegramService.sendMessage(chatId, "üñãÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞.");
                    userStateService.setUserState(chatId, "waiting_for_question_category");
                } else if (userMessage.equals("üîç –ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–∞")) {
                    telegramService.sendMessage(chatId, "üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞.");
                    userStateService.setUserState(chatId, "waiting_for_search_keyword");
                }
                else if (userMessage.equals("‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å")) {
                    List<Question> questions = questionService.getAllQuestions();
                    if (questions.isEmpty()) {
                        telegramService.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.");
                    } else {
                        sendQuestionListForUpdate(chatId, questions, 1);
                    }

                } else if (userMessage.equals("‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å")) {
                    System.out.println("demi");
                    List<Question> questions = questionService.getAllQuestions();
                    for (Question question : questions) {
                        System.out.println(question.getQuestion());
                    }
                    if (questions.isEmpty()) {
                        telegramService.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.");
                    } else {
                        sendQuestionListForDeletion(chatId, questions, 1);
                    }
                } else if (userMessage.equals("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")) {
                    handleApproveSubmission(chatId);
                } else if (userMessage.equals("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")) {
                    handleRejectSubmission(chatId);
                } else if (userMessage.equals("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")) {
                    handleStatistics(chatId);
                }
                break;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long callbackChatId = update.getCallbackQuery().getMessage().getChatId();

            System.out.println("Callback data received: " + callbackData); // –î–æ–±–∞–≤—å—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

            if (callbackData.equals("create_question")) {
                telegramService.sendMessage(callbackChatId, "üñãÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞.");
                userStateService.setUserState(callbackChatId, "waiting_for_question_category");
            } else if (callbackData.equals("search_question")) {
                telegramService.sendMessage(callbackChatId, "üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞.");
                userStateService.setUserState(callbackChatId, "waiting_for_search_keyword");
            } else if (callbackData.equals("update_answer")) {
                telegramService.sendMessage(callbackChatId, "üîÑ –í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.");
                userStateService.setUserState(callbackChatId, "waiting_for_question_id_for_update");
            } else if (callbackData.equals("delete_question")) {
                telegramService.sendMessage(callbackChatId, "üöÆ –í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
                userStateService.setUserState(callbackChatId, "waiting_for_question_id_for_deletion");
            } else if (callbackData.startsWith("list_questions_")) {
                int page = Integer.parseInt(callbackData.replace("list_questions_", ""));
                List<Question> questions = questionService.getAllQuestions();
                if (questions.isEmpty()) {
                    telegramService.sendMessage(callbackChatId, "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.");
                } else {
                    telegramService.sendQuestionsList(callbackChatId, questions, page);
                }
            } else if (callbackData.startsWith("questions_page_")) {
                int page = Integer.parseInt(callbackData.replace("questions_page_", ""));
                List<Question> questions = questionService.getAllQuestions();
                telegramService.sendQuestionsList(callbackChatId, questions, page);
            } else if (callbackData.startsWith("select_question_")) {
                String questionId = callbackData.replace("select_question_", "");
                Question question = questionService.getQuestionById(questionId);
                if (question != null) {
                    String response = String.format(
                            "–í–æ–ø—Ä–æ—Å: %s\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n–û—Ç–≤–µ—Ç: %s\nID: %s",
                            question.getQuestion(), question.getCategory(), question.getAnswer(), question.getId()
                    );
                    telegramService.sendMessage(callbackChatId, response);
                } else {
                    telegramService.sendMessage(callbackChatId, "–í–æ–ø—Ä–æ—Å —Å ID " + questionId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                }
            } else if (callbackData.startsWith("update_question_")) {
                String questionId = callbackData.replace("update_question_", "");
                Question question = questionService.getQuestionById(questionId);
                if (question != null) {
                    telegramService.sendMessage(callbackChatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: " + question.getQuestion());
                    userStateService.setUserState(callbackChatId, "waiting_for_new_answer");
                    userStateService.saveTemporaryData(callbackChatId, "questionToUpdate", question);
                } else {
                    telegramService.sendMessage(callbackChatId, "–í–æ–ø—Ä–æ—Å —Å ID " + questionId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                }
            } else if (callbackData.startsWith("delete_question_")) {
                String questionId = callbackData.replace("delete_question_", "");
                Question question = questionService.getQuestionById(questionId);
                if (question != null) {
                    questionService.deleteQuestion(question);
                    telegramService.sendMessage(callbackChatId, "–í–æ–ø—Ä–æ—Å —Å ID " + questionId + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
                } else {
                    telegramService.sendMessage(callbackChatId, "–í–æ–ø—Ä–æ—Å —Å ID " + questionId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                }
            } else if (callbackData.startsWith("update_page_")) {
                int page = Integer.parseInt(callbackData.replace("update_page_", ""));
                List<Question> questions = questionService.getAllQuestions();
                sendQuestionListForUpdate(callbackChatId, questions, page);
            } else if (callbackData.startsWith("delete_page_")) {
                int page = Integer.parseInt(callbackData.replace("delete_page_", ""));
                List<Question> questions = questionService.getAllQuestions();
                sendQuestionListForDeletion(callbackChatId, questions, page);
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    private void handleCreateQuestionCategory(long chatId, String userMessage) {
        userStateService.saveTemporaryData(chatId, "category", userMessage);
        telegramService.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å–∞–º –≤–æ–ø—Ä–æ—Å.");
        userStateService.setUserState(chatId, "waiting_for_question_text");
    }

    private void sendQuestionListForUpdate(long chatId, List<Question> questions, int page) {
        int pageSize = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        int totalPages = (int) Math.ceil((double) questions.size() / pageSize);

        List<Question> paginatedQuestions = questions.stream()
                .skip((long) (page - 1) * pageSize)
                .limit(pageSize)
                .toList();

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Question question : paginatedQuestions) {
            InlineKeyboardButton button = InlineKeyboardButton.builder()
                    .text(question.getQuestion() + " (ID: " + question.getId() + ")")
                    .callbackData("update_question_" + question.getId())
                    .build();
            keyboard.add(List.of(button));
        }

        if (totalPages > 1) {
            List<InlineKeyboardButton> navigation = new ArrayList<>();
            if (page > 1) {
                navigation.add(InlineKeyboardButton.builder()
                        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                        .callbackData("update_page_" + (page - 1))
                        .build());
            }
            if (page < totalPages) {
                navigation.add(InlineKeyboardButton.builder()
                        .text("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è")
                        .callbackData("update_page_" + (page + 1))
                        .build());
            }
            keyboard.add(navigation);
        }

        markup.setKeyboard(keyboard);
        telegramService.sendInlineKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", markup);
    }

    private void sendQuestionListForDeletion(long chatId, List<Question> questions, int page) {
        int pageSize = 5;
        int totalPages = (int) Math.ceil((double) questions.size() / pageSize);

        List<Question> paginatedQuestions = questions.stream()
                .skip((long) (page - 1) * pageSize)
                .limit(pageSize)
                .toList();

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Question question : paginatedQuestions) {
            InlineKeyboardButton button = InlineKeyboardButton.builder()
                    .text(question.getQuestion() + " (ID: " + question.getId() + ")")
                    .callbackData("delete_question_" + question.getId())
                    .build();
            keyboard.add(List.of(button));
        }

        if (totalPages > 1) {
            List<InlineKeyboardButton> navigation = new ArrayList<>();
            if (page > 1) {
                navigation.add(InlineKeyboardButton.builder()
                        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                        .callbackData("delete_page_" + (page - 1))
                        .build());
            }
            if (page < totalPages) {
                navigation.add(InlineKeyboardButton.builder()
                        .text("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è")
                        .callbackData("delete_page_" + (page + 1))
                        .build());
            }
            keyboard.add(navigation);
        }

        markup.setKeyboard(keyboard);
        telegramService.sendInlineKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", markup);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    private void handleCreateQuestionText(long chatId, String userMessage) {
        userStateService.saveTemporaryData(chatId, "question", userMessage);
        telegramService.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.");
        userStateService.setUserState(chatId, "waiting_for_answer_text");
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    private void handleCreateAnswerText(long chatId, String userMessage) {
        String category = (String) userStateService.getTemporaryData(chatId, "category");
        String questionText = (String) userStateService.getTemporaryData(chatId, "question");

        Question question = new Question();
        question.setCategory(category);
        question.setQuestion(questionText);
        question.setAnswer(userMessage);
        question.setLastUpdated(new Date());
        question.setAddedBy(getUserIdByChatId(chatId));

        questionService.createQuestion(question);

        telegramService.sendMessage(chatId, "–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.");
        userStateService.clearUserState(chatId);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ userId –ø–æ chatId
    private String getUserIdByChatId(long chatId) {
        return String.valueOf(chatId); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ chatId –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ userId
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    private void handleSearchQuestionByKeyword(long chatId, String userMessage) {
        List<Question> questions = questionService.searchQuestionsByKeyword(userMessage);

        if (questions.isEmpty()) {
            telegramService.sendMessage(chatId, "–í–æ–ø—Ä–æ—Å—ã —Å —Ç–∞–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            userStateService.clearUserState(chatId);
            return;
        }

        StringBuilder sb = new StringBuilder("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n");
        for (Question question : questions) {
            sb.append(question.getQuestion()).append(" (ID: ").append(question.getId()).append(")\n");
        }

        telegramService.sendMessage(chatId, sb.toString());
        userStateService.clearUserState(chatId);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    private void handleUpdateAnswerText(long chatId, String userMessage) {
        Question questionToUpdate = (Question) userStateService.getTemporaryData(chatId, "questionToUpdate");

        if (questionToUpdate == null) {
            telegramService.sendMessage(chatId, "–ù–µ –Ω–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
            userStateService.clearUserState(chatId);
            return;
        }

        questionToUpdate.setAnswer(userMessage);
        questionToUpdate.setLastUpdated(new Date());

        questionService.updateQuestion(questionToUpdate);

        telegramService.sendMessage(chatId, "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.");
        userStateService.clearUserState(chatId);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: –≤–≤–æ–¥ ID –≤–æ–ø—Ä–æ—Å–∞
    private void handleUpdateAnswerForQuestion(long chatId, String userMessage) {
        try {
            String questionId = userMessage.trim();
            Question question = questionService.getQuestionById(questionId);

            if (question == null) {
                telegramService.sendMessage(chatId, "–í–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                userStateService.clearUserState(chatId);
                return;
            }

            telegramService.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.");
            userStateService.setUserState(chatId, "waiting_for_new_answer");
            userStateService.saveTemporaryData(chatId, "questionToUpdate", question);
        } catch (Exception e) {
            telegramService.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.");
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    private void handleDeleteQuestionById(long chatId, String userMessage) {
        try {
            String questionId = userMessage.trim();
            Question question = questionService.getQuestionById(questionId);

            if (question == null) {
                telegramService.sendMessage(chatId, "–í–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                userStateService.clearUserState(chatId);
                return;
            }

            questionService.deleteQuestion(question);

            telegramService.sendMessage(chatId, "–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
            userStateService.clearUserState(chatId);
        } catch (Exception e) {
            telegramService.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.");
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    private void handleSubmissionApproval(long chatId, String userMessage) {
        try {
            String submissionId = userMessage.trim();
            Submission submission = submissionService.getSubmissionById(submissionId);

            if (submission == null) {
                telegramService.sendMessage(chatId, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            submission.setStatus("approved");
            submission.setReviewedBy(getUserIdByChatId(chatId));
            submission.setReviewedAt(new Date());
            submissionService.saveSubmission(submission);

            telegramService.sendMessage(chatId, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–æ.");
            userStateService.clearUserState(chatId);
        } catch (Exception e) {
            telegramService.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.");
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    private void handleSubmissionRejection(long chatId, String userMessage) {
        try {
            String submissionId = userMessage.trim();
            Submission submission = submissionService.getSubmissionById(submissionId);

            if (submission == null) {
                telegramService.sendMessage(chatId, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            submission.setStatus("rejected");
            submission.setReviewedBy(getUserIdByChatId(chatId));
            submission.setReviewedAt(new Date());
            submissionService.saveSubmission(submission);

            telegramService.sendMessage(chatId, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.");
            userStateService.clearUserState(chatId);
        } catch (Exception e) {
            telegramService.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.");
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    private void handleApproveSubmission(long chatId) {
        List<Submission> pendingSubmissions = submissionService.getPendingSubmissions();
        if (pendingSubmissions.isEmpty()) {
            telegramService.sendMessage(chatId, "–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.");
            return;
        }

        StringBuilder sb = new StringBuilder("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ:\n");
        for (Submission submission : pendingSubmissions) {
            sb.append(submission.getTitle()).append(" - ").append(submission.getSubmittedBy()).append(" (ID: ").append(submission.getId()).append(")\n");
        }

        telegramService.sendMessage(chatId, sb.toString() + "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è.");
        userStateService.setUserState(chatId, "waiting_for_submission_approval");
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    private void handleRejectSubmission(long chatId) {
        List<Submission> pendingSubmissions = submissionService.getPendingSubmissions();
        if (pendingSubmissions.isEmpty()) {
            telegramService.sendMessage(chatId, "–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ.");
            return;
        }

        StringBuilder sb = new StringBuilder("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:\n");
        for (Submission submission : pendingSubmissions) {
            sb.append(submission.getTitle()).append(" - ").append(submission.getSubmittedBy()).append(" (ID: ").append(submission.getId()).append(")\n");
        }

        telegramService.sendMessage(chatId, sb.toString() + "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.");
        userStateService.setUserState(chatId, "waiting_for_submission_rejection");
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    private void handleStatistics(long chatId) {
        long approvedCount = submissionService.countSubmissionsByStatus("approved");
        long rejectedCount = submissionService.countSubmissionsByStatus("rejected");
        long pendingCount = submissionService.countSubmissionsByStatus("pending");

        String stats = String.format("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–û–¥–æ–±—Ä–µ–Ω–æ: %d\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: %d\n–û–∂–∏–¥–∞–µ—Ç: %d",
                approvedCount, rejectedCount, pendingCount);
        telegramService.sendMessage(chatId, stats);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private void handleUserMessage(Update update, String userMessage, long chatId) {
        String state = userStateService.getUserState(chatId);

        if ("waiting_for_username".equals(state)) {
            userStateService.saveTemporaryData(chatId, "username", userMessage);
            telegramService.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            userStateService.setUserState(chatId, "waiting_for_telegram_id");
        } else if ("waiting_for_telegram_id".equals(state)) {
            try {
                Long telegramId = Long.parseLong(userMessage);
                userStateService.saveTemporaryData(chatId, "telegramId", telegramId);
                telegramService.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, admin, user, moderator).");
                userStateService.setUserState(chatId, "waiting_for_role");
            } catch (NumberFormatException e) {
                telegramService.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.");
            }
        } else if ("waiting_for_role".equals(state)) {
            userStateService.saveTemporaryData(chatId, "role", userMessage);
            telegramService.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            userStateService.setUserState(chatId, "waiting_for_department");
        } else if ("waiting_for_department".equals(state)) {
            userStateService.saveTemporaryData(chatId, "department", userMessage);
            telegramService.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            userStateService.setUserState(chatId, "waiting_for_password");
        } else if ("waiting_for_password".equals(state)) {
            String username = (String) userStateService.getTemporaryData(chatId, "username");
            Long telegramId = (Long) userStateService.getTemporaryData(chatId, "telegramId");
            String role = (String) userStateService.getTemporaryData(chatId, "role");
            String department = (String) userStateService.getTemporaryData(chatId, "department");
            String password = userMessage;

            userService.createNewUser(username, telegramId, role, department, password);

            userStateService.clearUserState(chatId);
            telegramService.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
        }
    }
}