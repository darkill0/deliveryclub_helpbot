package com.deliveryclub.helpbot.bot;

import com.deliveryclub.helpbot.bot.handlers.AdminHandler;
import com.deliveryclub.helpbot.bot.handlers.UserHandler;
import com.deliveryclub.helpbot.bot.keyboards.KeyboardService;
import com.deliveryclub.helpbot.models.*;
import com.deliveryclub.helpbot.service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Document;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.*;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjusters;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Component
public class EmployeeHelpBot extends TelegramLongPollingBot {
    @Autowired
    private UserStateService userStateService;
    @Autowired
    KeyboardService keyboardService;
    @Autowired
    @Lazy
    AdminHandler adminHandler;
    @Autowired
    @Lazy
    UserHandler userHandler;
    @Autowired
    UserService userService;
    @Autowired
    private DictionaryService dictionaryService;
    @Autowired
    private QuestionService questionService;
    @Autowired
    private CompensationRequestService compensationRequestService;

    @Autowired
    private SearchService searchService;

    @Autowired
    private FileService fileService;

    @Autowired
    private TaskService taskService;

    @Autowired
    private ShiftService shiftService;
    @Autowired
    private SubmissionService submissionService;
    @Autowired
    private SickLeaveService sickLeaveService;

    @Autowired
    private UserRequestService userRequestService;

    @Autowired
    private CallRuleService callRuleService;

    @Autowired
    private LinkService linkService;

    @Override
    public String getBotUsername() {
        return "helpdelivery_bot";
    }

    @Override
    public String getBotToken() {
        return "8079512753:AAG-YtqI2pabqeqG17zVFebDtBcwrMhd-RQ";
    }

    @Override
    public void onUpdateReceived(Update update) {

        if (update.hasMessage() && update.getMessage().hasText()) {

            String userMessage = update.getMessage().getText();
            Document userFile = update.getMessage().getDocument();
            long chatId = update.getMessage().getChatId();
            String role = getUserRole(update.getMessage().getFrom().getId()); // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            String userState = userStateService.getUserState(chatId);
            if(userMessage != null) {
                if(userService.findUserByTelegramId(update.getMessage().getFrom().getId()).isPresent() && userMessage.equalsIgnoreCase("/start")){
                    String responseText = switch (role) {
                        case "admin" -> "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π.";
                        case "moderator" -> "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä! –í—ã –º–æ–∂–µ—Ç–µ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.";
                        case "user" -> "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?";
                        default -> "–í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
                    };
                    if(role.equals("user")){
                        sendUserKeyboard(chatId, responseText);
                    }
                    if(role.equals("admin")){
                        sendAdminKeyboard(chatId, responseText);
                    }
                    if(role.equals("moderator")){
                        sendModeratorKeyboard(chatId, responseText);
                    }
                }else if(userService.findUserByTelegramId(update.getMessage().getFrom().getId()).isEmpty()){
                    sendMessage(chatId, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
                }
                if (userMessage.equalsIgnoreCase("/dictionary")) {
                    sendCategorySelection(chatId);
                    return;
                }

                if (role.equals("user")) {
                    if (userMessage.equals("üìú –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞")) {
                        List<Question> allQuestions = questionService.getAllQuestions();
                        if (allQuestions.isEmpty()) {
                            sendMessage(chatId, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª.");
                        } else {
                            StringBuilder rulesText = new StringBuilder("üìú –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞:\n\n");
                            for (Question question : allQuestions) {
                                rulesText.append(String.format(
                                        "–í–æ–ø—Ä–æ—Å: %s\n–û—Ç–≤–µ—Ç: %s\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nID: %s\n\n",
                                        question.getQuestion(), question.getAnswer(), question.getCategory(), question.getId()
                                ));
                            }
                            sendMessage(chatId, rulesText.toString());
                        }
                        return;
                    }

                    if (userMessage.equals("‚ùì –ö–æ–º–∞–Ω–¥—ã")) {
                        String commandsText = """
                                ‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
                                                            
                                /start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
                                /dictionary - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–≤–∞—Ä—è
                                /links - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                                /callrules - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∑–≤–æ–Ω–∫–æ–≤
                                /search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, /search –õ–ü–†)
                                                            
                                –ö–Ω–æ–ø–∫–∏:
                                üíº –ü—Ä–∞–∫—Ç–∏–∫–∏ - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏
                                üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–µ - –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π
                                üìÑ –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                                üì© –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                                üìÑ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                                ‚è≥ –í–∑—è—Ç—å –æ—Ç–≥—É–ª / –§–æ—Ä—Å-–º–∞–∂–æ—Ä - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–≥—É–ª –∏–ª–∏ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä
                                üí∏ –ó–∞–ø—Ä–æ—Å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
                                üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Å–º–µ–Ω—ã
                                üìú –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –±–∞–∑—ã
                                ‚ùì –ö–æ–º–∞–Ω–¥—ã - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                """;
                        sendMessage(chatId, commandsText);
                        return;
                    }
                }

                if (role.equals("moderator")) {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É"
                    if (userMessage.equals("üìã –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É")) {
                        SendMessage message = new SendMessage();
                        message.setChatId(chatId);
                        message.setText("–í–≤–µ–¥–∏—Ç–µ chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:");
                        message.setReplyMarkup(keyboardService.getUserSelectionKeyboard());
                        sendMessageWithInline(chatId, message);
                        return;
                    }

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (userState != null && userState.startsWith("awaiting_task_")) {
                        String assignedTo = userState.replace("awaiting_task_", "");
                        try {
                            // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞ –≤—Ä–µ–º—è" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω X, 2025-03-18 14:00")
                            String[] parts = userMessage.split(", ");
                            if (parts.length != 2) {
                                throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
                            }
                            String description = parts[0];
                            String deadlineStr = parts[1];
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                            Date deadline = sdf.parse(deadlineStr);

                            Task task = new Task();
                            task.setAssignedTo(assignedTo);
                            task.setDescription(description);
                            task.setDeadline(deadline);
                            task.setAssignedBy(String.valueOf(chatId));

                            taskService.saveTask(task);
                            sendMessage(chatId, "–ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + assignedTo + ".");
                            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            long userChatId = Long.parseLong(assignedTo);
                            sendMessage(userChatId, "üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: " + description + ". –î–µ–¥–ª–∞–π–Ω: " + deadlineStr);
                            userStateService.clearUserState(chatId);
                        } catch (Exception e) {
                            sendMessage(chatId, "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–û–ø–∏—Å–∞–Ω–∏–µ, yyyy-MM-dd HH:mm' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω X, 2025-03-18 14:00')");
                        }
                        return;
                    }
                }

                if (role.equals("user") && userMessage.equals("üí∏ –ó–∞–ø—Ä–æ—Å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏")) {
                    SendMessage message = new SendMessage();
                    message.setChatId(chatId);
                    message.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏:");
                    message.setReplyMarkup(keyboardService.getCompensationTypeKeyboard());
                    sendMessageWithInline(chatId, message);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
                if (userState != null && userState.startsWith("awaiting_compensation_")) {
                    String type = userState.replace("awaiting_compensation_", "");
                    Pattern pattern = Pattern.compile("(\\d+\\.?\\d*)\\s*(.*)");
                    Matcher matcher = pattern.matcher(userMessage);
                    if (matcher.find()) {
                        double amount = Double.parseDouble(matcher.group(1));
                        String description = matcher.group(2).trim();
                        CompensationRequest request = new CompensationRequest(String.valueOf(chatId), type, amount, description);
                        compensationRequestService.saveRequest(request);
                        sendMessage(chatId, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.");
                        userStateService.clearUserState(chatId);
                    } else {
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '500 –û–ø–∏—Å–∞–Ω–∏–µ'");
                    }
                    return;
                }

                if (role.equals("user") && userMessage.equals("‚è≥ –í–∑—è—Ç—å –æ—Ç–≥—É–ª / –§–æ—Ä—Å-–º–∞–∂–æ—Ä")) {
                    SendMessage message = new SendMessage();
                    message.setChatId(chatId);
                    message.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:");
                    message.setReplyMarkup(keyboardService.getRequestTypeKeyboard());
                    sendMessageWithInline(chatId, message);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
                if (userState != null && userState.startsWith("awaiting_request_")) {
                    String requestType = userState.replace("awaiting_request_", "");
                    UserRequest request = new UserRequest(String.valueOf(chatId), requestType, userMessage);
                    userRequestService.saveRequest(request);
                    sendMessage(chatId, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ " + (requestType.equals("DAY_OFF") ? "–æ—Ç–≥—É–ª" : "—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä") + " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.");
                    userStateService.clearUserState(chatId);
                    return;
                }

                if (userMessage.equalsIgnoreCase("/links")) {
                    sendLinkCategorySelection(chatId);
                    return;
                }

                if (role.equals("moderator") && userMessage.equals("üè• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–µ")) {
                    List<SickLeave> pendingSickLeaves = sickLeaveService.getPendingSickLeaves();
                    if (pendingSickLeaves.isEmpty()) {
                        sendMessage(chatId, "–ù–µ—Ç –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.");
                    } else {
                        sendPendingSickLeaves(chatId, pendingSickLeaves);
                    }
                    return;
                }

                if (role.equals("moderator")) {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
                    if (userMessage.equals("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")) {
                        List<Submission> allSubmissions = submissionService.getAllSubmissions();
                        if (allSubmissions.isEmpty()) {
                            sendMessage(chatId, "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.");
                        } else {
                            sendAllSubmissions(chatId, allSubmissions);
                        }
                        return;
                    }
                }

                if (role.equals("moderator")) {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
                    if (userMessage.equals("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")) {
                        List<Submission> pendingSubmissions = submissionService.getPendingSubmissions();
                        if (pendingSubmissions.isEmpty()) {
                            sendMessage(chatId, "–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.");
                        } else {
                            sendPendingSubmissions(chatId, pendingSubmissions);
                        }
                        return;
                    }

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–£—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–∞–π–ª"
                    if (userMessage.equals("‚úîÔ∏è –£—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–∞–π–ª")) {
                        List<FileResource> pendingFiles = fileService.getPendingFiles();
                        if (pendingFiles.isEmpty()) {
                            sendMessage(chatId, "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
                        } else {
                            userStateService.setUserState(chatId, "awaiting_file_approve");
                            sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ ID —Ñ–∞–π–ª–∞ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:");
                        }
                        return;
                    }

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ñ–∞–π–ª"
                    if (userMessage.equals("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ñ–∞–π–ª")) {
                        List<FileResource> pendingFiles = fileService.getPendingFiles();
                        if (pendingFiles.isEmpty()) {
                            sendMessage(chatId, "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.");
                        } else {
                            userStateService.setUserState(chatId, "awaiting_file_reject");
                            sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ ID —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:");
                        }
                        return;
                    }



                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID —Ñ–∞–π–ª–∞ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    if (userState != null && userState.equals("awaiting_file_approve")) {
                        String fileId = userMessage.trim();
                        Optional<FileResource> fileOpt = fileService.getFileById(fileId);
                        if (fileOpt.isPresent() && "PENDING".equals(fileOpt.get().getStatus())) {
                            FileResource file = fileOpt.get();
                            fileService.approveFile(fileId);
                            sendMessage(chatId, "–§–∞–π–ª —Å ID " + fileId + " —É—Ç–≤–µ—Ä–∂–¥–µ–Ω.");
                            long userChatId = Long.parseLong(file.getUploadedBy());
                            sendMessage(userChatId, "–í–∞—à —Ñ–∞–π–ª '" + file.getTitle() + "' —É—Ç–≤–µ—Ä–∂–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.");
                        } else {
                            sendMessage(chatId, "–§–∞–π–ª —Å ID " + fileId + " –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.");
                        }
                        userStateService.clearUserState(chatId);
                        return;
                    }

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                    if (userState != null && userState.equals("awaiting_file_reject")) {
                        String fileId = userMessage.trim();
                        Optional<FileResource> fileOpt = fileService.getFileById(fileId);
                        if (fileOpt.isPresent() && "PENDING".equals(fileOpt.get().getStatus())) {
                            FileResource file = fileOpt.get();
                            fileService.rejectFile(fileId);
                            sendMessage(chatId, "–§–∞–π–ª —Å ID " + fileId + " –æ—Ç–∫–ª–æ–Ω–µ–Ω.");
                            long userChatId = Long.parseLong(file.getUploadedBy());
                            sendMessage(userChatId, "–í–∞—à —Ñ–∞–π–ª '" + file.getTitle() + "' –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.");
                        } else {
                            sendMessage(chatId, "–§–∞–π–ª —Å ID " + fileId + " –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.");
                        }
                        userStateService.clearUserState(chatId);
                        return;
                    }
                }

                if (role.equals("moderator") && userMessage.equals("üìÖ –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É")) {
                    SendMessage message = new SendMessage();
                    message.setChatId(chatId);
                    message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã:");
                    message.setReplyMarkup(keyboardService.getUserSelectionKeyboard());
                    sendMessageWithInline(chatId, message);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (role.equals("moderator") && userState != null && userState.startsWith("awaiting_shift_")) {
                    String userId = userState.replace("awaiting_shift_", "");
                    try {
                        // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–æ –∫–æ–Ω–µ—Ü" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-03-20 09:00 17:00")
                        String[] parts = userMessage.split(" ");
                        if (parts.length != 3) {
                            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
                        }
                        String date = parts[0];
                        String startTime = parts[1];
                        String endTime = parts[2];

                        Shift shift = new Shift();
                        shift.setUserId(userId);
                        shift.setDate(date);
                        shift.setStartTime(startTime);
                        shift.setEndTime(endTime);

                        shiftService.saveShift(shift);
                        sendMessage(chatId, "–°–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId + " –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + date + " " + startTime + "‚Äì" + endTime);
                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        long userChatId = Long.parseLong(userId);
                        sendMessage(userChatId, "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–º–µ–Ω–∞: " + date + " —Å " + startTime + " –¥–æ " + endTime);
                        userStateService.clearUserState(chatId);
                    } catch (Exception e) {
                        sendMessage(chatId, "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '2025-03-20 09:00 17:00'");
                    }
                    return;
                }

                if (role.equals("moderator") && userMessage.equals("üí∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏")) {
                    List<CompensationRequest> pendingCompensations = compensationRequestService.getPendingRequests();
                    if (pendingCompensations.isEmpty()) {
                        sendMessage(chatId, "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.");
                    } else {
                        sendPendingCompensations(chatId, pendingCompensations);
                    }
                    return;
                }

                if (role.equals("moderator") && userMessage.equals("‚è≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≥—É–ª—ã/—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä—ã")) {
                    List<UserRequest> pendingRequests = userRequestService.getPendingRequests();
                    if (pendingRequests.isEmpty()) {
                        sendMessage(chatId, "–ù–µ—Ç –æ—Ç–≥—É–ª–æ–≤ –∏–ª–∏ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–æ–≤ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.");
                    } else {
                        sendPendingUserRequests(chatId, pendingRequests);
                    }
                    return;
                }



                if (userMessage.toLowerCase().startsWith("/search")) {
                    String query = userMessage.replace("/search", "").trim();
                    if (query.isEmpty()) {
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /search –õ–ü–†");
                        return;
                    }

                    List<SearchResult> results = searchService.search(query);
                    if (results.isEmpty()) {
                        sendMessage(chatId, "–ü–æ –∑–∞–ø—Ä–æ—Å—É '" + query + "' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
                    } else {
                        sendSearchResults(chatId, query, results);
                    }
                    return;
                }

                if (role.equals("user") && userMessage.equals("üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã")) {
                    SendMessage message = new SendMessage();
                    message.setChatId(chatId);
                    message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:");
                    message.setReplyMarkup(keyboardService.getShiftPeriodKeyboard());
                    sendMessageWithInline(chatId, message);
                    return;
                }

                if (userMessage.equalsIgnoreCase("/callrules")) {
                    sendCallRuleCategorySelection(chatId);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ—Ä–º–∏–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if (userStateService.getUserState(chatId) != null && userStateService.getUserState(chatId).startsWith("awaiting_term_")) {
                    String category = userStateService.getUserState(chatId).replace("awaiting_term_", "");
                    String term = userMessage.trim();
                    String description = dictionaryService.getTermDescription(category, term);
                    sendMessage(chatId, description);
                    userStateService.clearUserState(chatId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    return;
                }
                if(role.equals("admin")){
                    System.out.println("testadmin");
                    adminHandler.handlerAdminMessage(update, userMessage, chatId);

                }
                else{
                    userHandler.handlerUserMessage(update, userMessage, chatId);

                }
            }





        }
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            String role = getUserRole(chatId);

            if (role.equals("moderator")) {
                if (callbackData.startsWith("download_")) {
                    String submissionId = callbackData.replace("download_", "");
                    Submission submission = submissionService.getSubmissionById(submissionId);
                    if (submission != null && submission.getFileUrl() != null && !submission.getFileUrl().isEmpty()) {
                        File file = new File(submission.getFileUrl());
                        if (file.exists()) {
                            SendDocument sendDocument = new SendDocument();
                            sendDocument.setChatId(String.valueOf(chatId));
                            sendDocument.setDocument(new org.telegram.telegrambots.meta.api.objects.InputFile(file));
                            sendDocument.setCaption("–§–∞–π–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: " + submission.getTitle());
                            try {
                                execute(sendDocument);
                            } catch (TelegramApiException e) {
                                sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: " + e.getMessage());
                            }
                        } else {
                            sendMessage(chatId, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
                        }
                    } else {
                        sendMessage(chatId, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                    }
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                if (callbackData.startsWith("assign_task_user_")) {
                    String userId = callbackData.replace("assign_task_user_", "");
                    userStateService.setUserState(chatId, "awaiting_task_" + userId);
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId + " (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω X, 2025-03-18 14:00'):");
                }
            }

            if (role.equals("moderator") && callbackData.startsWith("select_user_")) {
                String userId = callbackData.replace("select_user_", "");
                userStateService.setUserState(chatId, "awaiting_shift_" + userId);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId + " –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–æ –∫–æ–Ω–µ—Ü' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2025-03-20 09:00 17:00')");
            }

            if (role.equals("moderator")) {

                if (callbackData.startsWith("approve_submission_")) {
                    String submissionId = callbackData.replace("approve_submission_", "");
                    Submission submission = submissionService.getSubmissionById(submissionId);
                    if (submission != null) {
                        submissionService.approveSubmission(submissionId);
                        sendMessage(chatId, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ID " + submissionId + " —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.");
                        long userChatId = Long.parseLong(submission.getSubmittedBy());
                        sendMessage(userChatId, "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ '" + submission.getTitle() + "' —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.");
                    }
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                if (callbackData.startsWith("reject_submission_")) {
                    String submissionId = callbackData.replace("reject_submission_", "");
                    Submission submission = submissionService.getSubmissionById(submissionId);
                    if (submission != null) {
                        submissionService.rejectSubmission(submissionId);
                        sendMessage(chatId, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ID " + submissionId + " –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.");
                        long userChatId = Long.parseLong(submission.getSubmittedBy());
                        sendMessage(userChatId, "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ '" + submission.getTitle() + "' –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.");
                    }
                }

                if (callbackData.startsWith("approve_compensation_")) {
                    String requestId = callbackData.replace("approve_compensation_", "");
                    CompensationRequest request = compensationRequestService.getPendingRequests().stream()
                            .filter(r -> r.getId().equals(requestId))
                            .findFirst()
                            .orElse(null);
                    if (request != null) {
                        compensationRequestService.approveCompensation(requestId);
                        sendMessage(chatId, "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Å ID " + requestId + " —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.");
                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        long userChatId = Long.parseLong(request.getUserId());
                        sendMessage(userChatId, String.format(
                                "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é (%s, %.2f —Ä—É–±, %s) —É—Ç–≤–µ—Ä–∂–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
                                request.getType(), request.getAmount(), request.getDescription()
                        ));
                    }
                } else if (callbackData.startsWith("reject_compensation_")) {
                    String requestId = callbackData.replace("reject_compensation_", "");
                    CompensationRequest request = compensationRequestService.getPendingRequests().stream()
                            .filter(r -> r.getId().equals(requestId))
                            .findFirst()
                            .orElse(null);
                    if (request != null) {
                        compensationRequestService.rejectCompensation(requestId);
                        sendMessage(chatId, "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Å ID " + requestId + " –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");
                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        long userChatId = Long.parseLong(request.getUserId());
                        sendMessage(userChatId, String.format(
                                "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é (%s, %.2f —Ä—É–±, %s) –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
                                request.getType(), request.getAmount(), request.getDescription()
                        ));
                    }
                }

                if (callbackData.startsWith("approve_sickleave_")) {
                    String sickLeaveId = callbackData.replace("approve_sickleave_", "");
                    sickLeaveService.approveSickLeave(sickLeaveId);
                    sendMessage(chatId, "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π —Å ID " + sickLeaveId + " —É—Ç–≤–µ—Ä–∂–¥–µ–Ω.");
                } else if (callbackData.startsWith("reject_sickleave_")) {
                    String sickLeaveId = callbackData.replace("reject_sickleave_", "");
                    sickLeaveService.rejectSickLeave(sickLeaveId);
                    sendMessage(chatId, "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π —Å ID " + sickLeaveId + " –æ—Ç–∫–ª–æ–Ω–µ–Ω.");
                }

                if (callbackData.startsWith("approve_request_")) {
                    String requestId = callbackData.replace("approve_request_", "");
                    UserRequest request = userRequestService.getPendingRequests().stream()
                            .filter(r -> r.getId().equals(requestId))
                            .findFirst()
                            .orElse(null);
                    if (request != null) {
                        userRequestService.approveRequest(requestId);
                        sendMessage(chatId, "–ó–∞–ø—Ä–æ—Å —Å ID " + requestId + " —É—Ç–≤–µ—Ä–∂–¥–µ–Ω.");
                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        long userChatId = Long.parseLong(request.getUserId());
                        String requestType = request.getType().equals("DAY_OFF") ? "–æ—Ç–≥—É–ª" : "—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä";
                        sendMessage(userChatId, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ " + requestType + " (" + request.getDescription() + ") —É—Ç–≤–µ—Ä–∂–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.");
                    }
                } else if (callbackData.startsWith("reject_request_")) {
                    String requestId = callbackData.replace("reject_request_", "");
                    UserRequest request = userRequestService.getPendingRequests().stream()
                            .filter(r -> r.getId().equals(requestId))
                            .findFirst()
                            .orElse(null);
                    if (request != null) {
                        userRequestService.rejectRequest(requestId);
                        sendMessage(chatId, "–ó–∞–ø—Ä–æ—Å —Å ID " + requestId + " –æ—Ç–∫–ª–æ–Ω–µ–Ω.");
                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        long userChatId = Long.parseLong(request.getUserId());
                        String requestType = request.getType().equals("DAY_OFF") ? "–æ—Ç–≥—É–ª" : "—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä";
                        sendMessage(userChatId, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ " + requestType + " (" + request.getDescription() + ") –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.");
                    }
                }
            }

            if (role.equals("user")) {

                if (callbackData.equals("compensation_overtime")) {
                    userStateService.setUserState(chatId, "awaiting_compensation_OVERTIME");
                    sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '500 –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ 2 —á–∞—Å–∞'):");
                } else if (callbackData.equals("compensation_transport")) {
                    userStateService.setUserState(chatId, "awaiting_compensation_TRANSPORT");
                    sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '300 –¢–∞–∫—Å–∏ –¥–æ –¥–æ–º–∞'):");
                } else if (callbackData.equals("compensation_other")) {
                    userStateService.setUserState(chatId, "awaiting_compensation_OTHER");
                    sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1000 –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'):");
                }

                if (callbackData.equals("request_day_off")) {
                    userStateService.setUserState(chatId, "awaiting_request_DAY_OFF");
                    sendMessage(chatId, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–≥—É–ª–∞:");
                } else if (callbackData.equals("request_force_majeure")) {
                    userStateService.setUserState(chatId, "awaiting_request_FORCE_MAJEURE");
                    sendMessage(chatId, "–û–ø–∏—à–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é (—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä):");
                }

                if (callbackData.equals("shift_today")) {
                    sendShiftForDay(chatId);
                } else if (callbackData.equals("shift_week")) {
                    sendShiftsForWeek(chatId);
                }
            }

            if (callbackData.startsWith("category_")) {
                String category = callbackData.replace("category_", "");
                userStateService.setUserState(chatId, "awaiting_term_" + category);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '" + category + "':");
            }


            if (callbackData.startsWith("link_category_")) {
                String categoryName = callbackData.replace("link_category_", "");
                sendLinksForCategory(chatId, categoryName);
            }

            if (callbackData.startsWith("callrule_category_")) {
                String categoryName = callbackData.replace("callrule_category_", "");
                sendRulesForCategory(chatId, categoryName);
            }

            if(role.equals("user")){
                System.out.println("asdasd");
                userHandler.handlerUserMessage(update, String.valueOf(update.getMessage()), chatId);
            }

            if(role.equals("admin")){
                System.out.println("whitepower");
                adminHandler.handlerAdminMessage(update, String.valueOf(update.getMessage()), chatId);

            }
        }

        if (update.getMessage().hasDocument()) {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ chatId –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Message
            long chatId = update.getMessage().getChatId();

            // –ü–µ—Ä–µ–¥–∞—á–∞ chatId –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            userHandler.handlerUserMessage(update, "", chatId);
        }

    }

    private void sendShiftForDay(long chatId) {
        String today = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        List<Shift> shifts = shiftService.getShiftsByUserAndDate(chatId, today);
        if (shifts.isEmpty()) {
            sendMessage(chatId, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω.");
        } else {
            StringBuilder response = new StringBuilder("üìÖ –í–∞—à–∏ —Å–º–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (" + today + "):\n");
            for (Shift shift : shifts) {
                response.append("- ").append(shift.getStartTime()).append("‚Äì").append(shift.getEndTime()).append("\n");
            }
            sendMessage(chatId, response.toString());
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
    private void sendShiftsForWeek(long chatId) {
        List<Shift> shifts = shiftService.getShiftsByUserForWeek(chatId);
        if (shifts.isEmpty()) {
            sendMessage(chatId, "–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω.");
        } else {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            LocalDate today = LocalDate.now();
            LocalDate endOfWeek = today.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–º–µ–Ω—ã: —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∏ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏
            List<Shift> filteredShifts = shifts.stream()
                    .filter(shift -> {
                        LocalDate shiftDate = LocalDate.parse(shift.getDate(), DateTimeFormatter.ISO_LOCAL_DATE);
                        return !shiftDate.isBefore(today) && !shiftDate.isAfter(endOfWeek);
                    })
                    .collect(Collectors.toList());

            if (filteredShifts.isEmpty()) {
                sendMessage(chatId, "–ù–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω.");
            } else {
                // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ)
                Set<Shift> uniqueShifts = new LinkedHashSet<>(filteredShifts);
                StringBuilder response = new StringBuilder("üìÜ –í–∞—à–∏ —Å–º–µ–Ω—ã –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é (—Å —Å–µ–≥–æ–¥–Ω—è):\n");
                for (Shift shift : uniqueShifts) {
                    response.append("- ").append(shift.getDate()).append(": ")
                            .append(shift.getStartTime()).append("‚Äì").append(shift.getEndTime()).append("\n");
                }
                sendMessage(chatId, response.toString());
            }
        }
    }

    private void sendPendingFiles(long chatId, List<FileResource> files) {
        for (FileResource file : files) {
            String messageText = String.format(
                    "üìé –§–∞–π–ª\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\nID: %s\n–°—Ç–∞—Ç—É—Å: %s",
                    file.getUploadedBy(), file.getTitle(), file.getId(), file.getStatus()
            );
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(messageText);
            message.setReplyMarkup(keyboardService.getFileModerationKeyboard(file.getId()));
            sendMessageWithInline(chatId, message);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    private void sendAllFiles(long chatId, List<FileResource> files) {
        StringBuilder response = new StringBuilder("üìÑ –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ñ–∞–π–ª—ã):\n");
        for (FileResource file : files) {
            response.append(String.format(
                    "ID: %s | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s | –ù–∞–∑–≤–∞–Ω–∏–µ: %s | –°—Ç–∞—Ç—É—Å: %s\n",
                    file.getId(), file.getUploadedBy(), file.getTitle(), file.getStatus()
            ));
        }
        sendMessage(chatId, response.toString());
    }

    private void sendPendingSubmissions(long chatId, List<Submission> submissions) {
        for (Submission submission : submissions) {
            String messageText = String.format(
                    "üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\nID: %s\n–°—Ç–∞—Ç—É—Å: %s",
                    submission.getSubmittedBy(), submission.getTitle(), submission.getDescription(),
                    submission.getId(), submission.getStatus()
            );
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText(messageText);

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            if (submission.getFileUrl() != null && !submission.getFileUrl().isEmpty()) {
                InlineKeyboardButton downloadButton = InlineKeyboardButton.builder()
                        .text("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                        .callbackData("download_" + submission.getId())
                        .build();
                keyboard.add(List.of(downloadButton));
            }

            markup.setKeyboard(keyboard);
            if (!keyboard.isEmpty()) {
                message.setReplyMarkup(markup);
            }

            sendMessageWithInline(chatId, message);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    private void sendAllSubmissions(long chatId, List<Submission> submissions) {
        for (Submission submission : submissions) {
            String messageText = String.format(
                    "üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\nID: %s\n–°—Ç–∞—Ç—É—Å: %s",
                    submission.getSubmittedBy(), submission.getTitle(), submission.getDescription(),
                    submission.getId(), submission.getStatus()
            );
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(messageText);
            if ("pending".equals(submission.getStatus())) {
                message.setReplyMarkup(keyboardService.getSubmissionModerationKeyboard(submission.getId()));
            }
            sendMessageWithInline(chatId, message);
        }
    }

    private void sendPendingSickLeaves(long chatId, List<SickLeave> sickLeaves) {
        for (SickLeave sickLeave : sickLeaves) {
            String messageText = String.format(
                    "üìÖ –ë–æ–ª—å–Ω–∏—á–Ω—ã–π\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n–°: %s\n–ü–æ: %s\n–°—Ç–∞—Ç—É—Å: %s",
                    sickLeave.getUserId(), sickLeave.getStartDate(), sickLeave.getEndDate(), sickLeave.getStatus()
            );
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(messageText);
            message.setReplyMarkup(keyboardService.getSickLeaveModerationKeyboard(sickLeave.getId()));
            sendMessageWithInline(chatId, message);
        }
    }

    private void sendPendingCompensations(long chatId, List<CompensationRequest> compensations) {
        for (CompensationRequest compensation : compensations) {
            String messageText = String.format(
                    "üí∏ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n–¢–∏–ø: %s\n–°—É–º–º–∞: %.2f —Ä—É–±\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–°—Ç–∞—Ç—É—Å: %s",
                    compensation.getUserId(), compensation.getType(), compensation.getAmount(),
                    compensation.getDescription(), compensation.getStatus()
            );
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(messageText);
            message.setReplyMarkup(keyboardService.getCompensationModerationKeyboard(compensation.getId()));
            sendMessageWithInline(chatId, message);
        }
    }

    private void sendPendingUserRequests(long chatId, List<UserRequest> requests) {
        for (UserRequest request : requests) {
            String requestType = request.getType().equals("DAY_OFF") ? "–û—Ç–≥—É–ª" : "–§–æ—Ä—Å-–º–∞–∂–æ—Ä";
            String messageText = String.format(
                    "‚è≥ –ó–∞–ø—Ä–æ—Å\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n–¢–∏–ø: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–°—Ç–∞—Ç—É—Å: %s",
                    request.getUserId(), requestType, request.getDescription(), request.getStatus()
            );
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(messageText);
            message.setReplyMarkup(keyboardService.getUserRequestModerationKeyboard(request.getId()));
            sendMessageWithInline(chatId, message);
        }
    }

    private String getUserRole(long chatId) {
        Optional<User> userOpt = userService.findUserByTelegramId(chatId);
        if (userOpt.isPresent()) {
            return userOpt.get().getRole(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–ª—å –∏–∑ –æ–±—ä–µ–∫—Ç–∞ User
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ —Å —Ä–æ–ª—å—é "user" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            userService.createNewUser("User_" + chatId, chatId, "user", "unknown", null);
            return "user";
        }
    }

    private void sendSearchResults(long chatId, String query, List<SearchResult> results) {
        StringBuilder response = new StringBuilder("üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '" + query + "':*\n\n");
        int count = 0;

        for (SearchResult result : results) {
            if (count >= 10) { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                response.append("–ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.\n");
                break;
            }
            response.append("üìå *").append(result.getSource()).append(" ‚Äî ").append(result.getCategory()).append("*\n");
            if (result.getTitle() != null && !result.getTitle().isEmpty()) {
                response.append("‚û°Ô∏è *").append(result.getTitle()).append("*\n");
            }
            response.append(result.getDescription()).append("\n\n");
            count++;
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(response.toString());
        message.setParseMode("Markdown");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendLinkCategorySelection(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üî• –í–ê–ñ–ù–´–ï –ò –ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò üî•\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:");

        List<LinkCategory> categories = linkService.getAllCategories();
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (LinkCategory category : categories) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(category.getName());
            button.setCallbackData("link_category_" + category.getName());
            row.add(button);
            rows.add(row);
        }

        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);
        sendMessageWithInline(chatId, message);
    }

    private void sendCallRuleCategorySelection(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("‚ú® –ü–†–ê–í–ò–õ–ê –î–û–ó–í–û–ù–ê ‚ú®\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:");

        List<CallRuleCategory> categories = callRuleService.getAllCategories();
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (CallRuleCategory category : categories) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(category.getName());
            button.setCallbackData("callrule_category_" + category.getName());
            row.add(button);
            rows.add(row);
        }

        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);
        sendMessageWithInline(chatId, message);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private void sendRulesForCategory(long chatId, String categoryName) {
        CallRuleCategory category = callRuleService.getCategoryByName(categoryName);
        if (category == null || category.getRules().isEmpty()) {
            sendMessage(chatId, "–ü—Ä–∞–≤–∏–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '" + categoryName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            return;
        }

        StringBuilder response = new StringBuilder("üìå *–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + categoryName + "*\n\n");
        for (CallRule rule : category.getRules()) {
            response.append("‚ñ´ ").append(rule.getDescription()).append("\n");
            if (rule.getLink() != null && !rule.getLink().isEmpty()) {
                response.append("üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ](").append(rule.getLink()).append(")\n");
            }
            response.append("\n");
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(response.toString());
        message.setParseMode("Markdown");
        sendMessageWithInline(chatId, message);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private void sendLinksForCategory(long chatId, String categoryName) {
        LinkCategory category = linkService.getCategoryByName(categoryName);
        if (category == null || category.getLinks().isEmpty()) {
            sendMessage(chatId, "–°—Å—ã–ª–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '" + categoryName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            return;
        }

        StringBuilder response = new StringBuilder("üìå *–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + categoryName + "*\n\n");
        for (Link link : category.getLinks()) {
            response.append("‚û°Ô∏è *").append(link.getName()).append("*\n")
                    .append(link.getDescription()).append("\n")
                    .append("[").append(link.getUrl()).append("](").append(link.getUrl()).append(")\n\n");
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(response.toString());
        message.setParseMode("Markdown");
        sendMessageWithInline(chatId, message);
    }

    private void sendCategorySelection(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:");

        List<DictionaryCategory> categories = dictionaryService.getAllCategories();
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (DictionaryCategory category : categories) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(category.getName());
            button.setCallbackData("category_" + category.getName());
            row.add(button);
            rows.add(row);
        }

        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);
        sendMessageWithInline(chatId, message);
    }



    public void sendMessage(long chatId, String message) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(message);
        try {
            execute(sendMessage);
        }catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendMessageWithInline(long chatId, SendMessage message) {
        try {
            execute(message);
        }catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendMessageWithInline2(long chatId, String text, InlineKeyboardMarkup markup) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(markup);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendUserKeyboard(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(keyboardService.getUserKeyboard());
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendAdminKeyboard(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(keyboardService.getAdminKeyboard());
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendModeratorKeyboard(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(keyboardService.getModeratorKeyboard());
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    public void sendQuestionKeyboard(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?");
        message.setReplyMarkup(keyboardService.getQuestionManagementKeyboard());
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendSiclKeyboard(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?");
        message.setReplyMarkup(keyboardService.getSickLeaveKeyboard());
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}

